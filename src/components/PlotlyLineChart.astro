---
// PlotlyLineChart.astro
import { parse } from 'csv-parse/sync'
import { readFileSync } from 'fs'
import { join } from 'path'

// Read and parse the CSV file
const csvPath = join(process.cwd(), 'public', 'historical_data.csv')
let csvData, records, columns, companies, dataTypes, error

// Define the companies we want to show
const defaultCompanies = ['AAPL', 'MSFT', 'GOOGL', 'AMZN']
const colors = {
	AAPL: '#FF9900',
	AMZN: '#FF6600',
	MSFT: '#7FBA00',
	GOOGL: '#4285F4'
}

try {
	csvData = readFileSync(csvPath, 'utf-8')
	records = parse(csvData, { columns: true, skip_empty_lines: true })
	columns = Object.keys(records[0])

	// Extract unique data types from the flattened structure
	dataTypes = [
		...new Set(columns.map((col) => col.split('_')[0]).filter((type) => type !== 'Date'))
	]

	companies = defaultCompanies
} catch (e) {
	error = e.message
	console.error('Error reading or parsing CSV:', error)
}

// Client-side script for Plotly
const clientScript = `
  (function() {
    if (typeof Plotly === 'undefined') {
      const plotlyScript = document.createElement('script');
      plotlyScript.src = 'https://cdn.plot.ly/plotly-latest.min.js';
      document.head.appendChild(plotlyScript);

      plotlyScript.onload = () => initPlotly();
    } else {
      initPlotly();
    }

    const records = ${JSON.stringify(records)};
    const companies = ${JSON.stringify(companies)};
    const dataTypes = ${JSON.stringify(dataTypes)};
    const colors = ${JSON.stringify(colors)};

    function initPlotly() {
      document.getElementById('dataTypeSelect').value = 'Cumulative Return';
      updateChart();
      document.getElementById('dataTypeSelect').addEventListener('change', updateChart);
      updateChartTheme(document.documentElement.classList.contains('dark'));
    }

    function updateChart() {
      const selectedDataType = document.getElementById('dataTypeSelect').value;

      const data = companies.map(company => ({
        x: records.map(record => record.Date),
        y: records.map(record => parseFloat(record[\`\${selectedDataType}_\${company}\`])),
        type: 'scatter',
        mode: 'lines',
        name: company,
        line: { color: colors[company] }
      }));

      const layout = {
        title: \`\${selectedDataType} for AAPL, MSFT, GOOGL, AMZN\`,
        xaxis: { title: 'Date', rangeslider: {} },
        yaxis: { title: selectedDataType },
        height: 600,
        autosize: true,
        showlegend: true,
        margin: { t: 50, b: 50, l: 50, r: 20 },
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)'
      };

      const config = {
        responsive: true,
        displayModeBar: false
      };

      Plotly.react('plotlyChart', data, layout, config);
      updateChartTheme(document.documentElement.classList.contains('dark'));
    }

    function updateChartTheme(isDark) {
      const textColor = isDark ? '#e5e7eb' : '#374151';
      const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';

      const update = {
        'xaxis.color': textColor,
        'yaxis.color': textColor,
        'xaxis.gridcolor': gridColor,
        'yaxis.gridcolor': gridColor,
        'font.color': textColor,
      };

      Plotly.relayout('plotlyChart', update);
    }

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          const isDark = document.documentElement.classList.contains('dark');
          updateChartTheme(isDark);
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
  })();
`
---

<div class='chart-container'>
	<div class='controls-container mb-2 flex items-center gap-4'>
		<div class='filter-container'>
			<label for='dataTypeSelect' class='text-sm font-medium text-gray-700 dark:text-gray-300 mr-2'
				>Select Filter:</label
			>
			<select
				id='dataTypeSelect'
				class='text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500'
			>
				{dataTypes.map((dataType) => <option value={dataType}>{dataType}</option>)}
			</select>
		</div>
	</div>

	<div id='plotlyChart' class='w-full h-[600px]'></div>
</div>

<script defer src='https://cdn.plot.ly/plotly-latest.min.js'></script>

<script set:html={clientScript} />

<style>
	.chart-container {
		width: 100%;
		max-width: 1000px;
		margin: 0 auto;
		font-family: Arial, sans-serif;
	}
	.controls-container {
		align-items: flex-start;
	}
	select {
		padding: 2px 20px 2px 8px;
		font-size: 14px;
		appearance: none;
		-webkit-appearance: none;
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
		background-repeat: no-repeat;
		background-position: right 0.5em top 50%;
		background-size: 0.65em auto;
	}
</style>
